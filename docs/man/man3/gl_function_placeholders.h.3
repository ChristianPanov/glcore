.TH "include/glcore/modules/gl_function_placeholders.h" 3 "Fri Apr 28 2023" "GLCore" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/glcore/modules/gl_function_placeholders.h \- OpenGL function placeholders\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <cstdint>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBglCreateBuffers\fP(n,  buffers)   __glCreateBuffers(n, buffers)"
.br
.ti -1c
.RI "#define \fBglDeleteBuffers\fP(n,  buffers)   __glDeleteBuffers(n, buffers)"
.br
.ti -1c
.RI "#define \fBglBindBuffer\fP(target,  buffer)   __glBindBuffer(target, buffer)"
.br
.ti -1c
.RI "#define \fBglBufferData\fP(target,  size,  data,  usage)   __glBufferData(target, size, data, usage)"
.br
.ti -1c
.RI "#define \fBglCreateVertexArrays\fP(n,  arrays)   __glCreateVertexArrays(n, arrays)"
.br
.ti -1c
.RI "#define \fBglDeleteVertexArrays\fP(n,  arrays)   __glDeleteVertexArrays(n, arrays)"
.br
.ti -1c
.RI "#define \fBglBindVertexArray\fP(arr)   __glBindVertexArray(arr)"
.br
.ti -1c
.RI "#define \fBglEnableVertexAttribArray\fP(index)   __glEnableVertexAttribArray(index)"
.br
.ti -1c
.RI "#define \fBglVertexAttribPointer\fP(index,  size,  type,  normalized,  stride,  pointer)   __glVertexAttribPointer(index, size, type, normalized, stride, pointer)"
.br
.ti -1c
.RI "#define \fBglCreateProgram\fP()   __glCreateProgram()"
.br
.ti -1c
.RI "#define \fBglCreateShader\fP(shaderType)   __glCreateShader(shaderType)"
.br
.ti -1c
.RI "#define \fBglDeleteProgram\fP(program)   __glDeleteProgram(program)"
.br
.ti -1c
.RI "#define \fBglUseProgram\fP(program)   __glUseProgram(program)"
.br
.ti -1c
.RI "#define \fBglLinkProgram\fP(program)   __glLinkProgram(program)"
.br
.ti -1c
.RI "#define \fBglValidateProgram\fP(program)   __glValidateProgram(program)"
.br
.ti -1c
.RI "#define \fBglShaderSource\fP(shader,  count,  string,  length)   __glShaderSource(shader, count, string, length)"
.br
.ti -1c
.RI "#define \fBglCompileShader\fP(shader)   __glCompileShader(shader)"
.br
.ti -1c
.RI "#define \fBglAttachShader\fP(program,  shader)   __glAttachShader(program, shader)"
.br
.ti -1c
.RI "#define \fBglDetachShader\fP(program,  shader)   __glDetachShader(program, shader)"
.br
.ti -1c
.RI "#define \fBglDeleteShader\fP(shader)   __glDeleteShader(shader)"
.br
.ti -1c
.RI "#define \fBglGetShaderiv\fP(shader,  pname,  params)   __glGetShaderiv(shader, pname, params)"
.br
.ti -1c
.RI "#define \fBglGetShaderInfoLog\fP(shader,  maxLength,  length,  infoLog)   __glGetShaderInfoLog(shader, maxLength, length, infoLog)"
.br
.ti -1c
.RI "#define \fBglGetUniformLocation\fP(program,  name)   __glGetUniformLocation(program, name)"
.br
.ti -1c
.RI "#define \fBglUniform1f\fP(location,  v0)   __glUniform1f(location, v0)"
.br
.ti -1c
.RI "#define \fBglUniform2f\fP(location,  v0,  v1)   __glUniform2f(location, v0, v1)"
.br
.ti -1c
.RI "#define \fBglUniform3f\fP(location,  v0,  v1,  v2)   __glUniform3f(location, v0, v1, v2)"
.br
.ti -1c
.RI "#define \fBglUniform4f\fP(location,  v0,  v1,  v2,  v3)   __glUniform4f(location, v0, v1, v2, v3)"
.br
.ti -1c
.RI "#define \fBGL_STATIC_DRAW\fP"
.br
.ti -1c
.RI "#define \fBGL_ARRAY_BUFFER\fP"
.br
.ti -1c
.RI "#define \fBGL_ELEMENT_ARRAY_BUFFER\fP"
.br
.ti -1c
.RI "#define \fBGL_VERTEX_SHADER\fP"
.br
.ti -1c
.RI "#define \fBGL_FRAGMENT_SHADER\fP"
.br
.ti -1c
.RI "#define \fBGL_TESS_CONTROL_SHADER\fP"
.br
.ti -1c
.RI "#define \fBGL_TESS_EVALUATION_SHADER\fP"
.br
.ti -1c
.RI "#define \fBGL_GEOMETRY_SHADER\fP"
.br
.ti -1c
.RI "#define \fBGL_COMPILE_STATUS\fP"
.br
.ti -1c
.RI "#define \fBGL_INFO_LOG_LENGTH\fP"
.br
.ti -1c
.RI "#define \fBGL_FLOAT\fP"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_INT\fP"
.br
.ti -1c
.RI "#define \fBGL_UNSIGNED_BYTE\fP"
.br
.ti -1c
.RI "#define \fBGL_FALSE\fP   0"
.br
.in -1c
.SH "Detailed Description"
.PP 
OpenGL function placeholders\&. 


.PP
\fBAuthor\fP
.RS 4
Christian Panov 
.RE
.PP
\fBVersion\fP
.RS 4
0\&.1 
.RE
.PP
\fBDate\fP
.RS 4
2023-04-28
.RE
.PP
in order for the header only library to not throw a large number of errors, we need to provide placeholders for the OpenGL functions\&. This is done by defining macros for each function, and then defining the function as an empty function (one that returns a default-initialized value, or does nothing)\&. 
.br
.PP
\fBNote\fP
.RS 4
If one intends to actually use the library, they must provide their own OpenGL loader and \fBNOT\fP include this header file\&. 
.br
.RE
.PP
\fBCopyright\fP
.RS 4
MIT License 
.RE
.PP

.PP
Definition in file \fBgl_function_placeholders\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define GL_ARRAY_BUFFER"
\fBValue:\fP.PP
.nf
    std::uint32_t       \\
    {                   \\
    }
.fi

.PP
Definition at line \fB89\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_COMPILE_STATUS"
\fBValue:\fP.PP
.nf
    std::uint32_t         \\
    {                     \\
    }
.fi

.PP
Definition at line \fB117\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_ELEMENT_ARRAY_BUFFER"
\fBValue:\fP.PP
.nf
    std::uint32_t               \\
    {                           \\
    }
.fi

.PP
Definition at line \fB93\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_FALSE   0"

.PP
Definition at line \fB137\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_FLOAT"
\fBValue:\fP.PP
.nf
    std::uint32_t \\
    {             \\
    }
.fi

.PP
Definition at line \fB125\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_FRAGMENT_SHADER"
\fBValue:\fP.PP
.nf
    std::uint32_t          \\
    {                      \\
    }
.fi

.PP
Definition at line \fB101\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_GEOMETRY_SHADER"
\fBValue:\fP.PP
.nf
    std::uint32_t          \\
    {                      \\
    }
.fi

.PP
Definition at line \fB113\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_INFO_LOG_LENGTH"
\fBValue:\fP.PP
.nf
    std::uint32_t          \\
    {                      \\
    }
.fi

.PP
Definition at line \fB121\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_STATIC_DRAW"
\fBValue:\fP.PP
.nf
    std::uint32_t      \\
    {                  \\
    }
.fi

.PP
Definition at line \fB85\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_TESS_CONTROL_SHADER"
\fBValue:\fP.PP
.nf
    std::uint32_t              \\
    {                          \\
    }
.fi

.PP
Definition at line \fB105\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_TESS_EVALUATION_SHADER"
\fBValue:\fP.PP
.nf
    std::uint32_t                 \\
    {                             \\
    }
.fi

.PP
Definition at line \fB109\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_UNSIGNED_BYTE"
\fBValue:\fP.PP
.nf
    std::uint32_t        \\
    {                    \\
    }
.fi

.PP
Definition at line \fB133\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_UNSIGNED_INT"
\fBValue:\fP.PP
.nf
    std::uint32_t       \\
    {                   \\
    }
.fi

.PP
Definition at line \fB129\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define GL_VERTEX_SHADER"
\fBValue:\fP.PP
.nf
    std::uint32_t        \\
    {                    \\
    }
.fi

.PP
Definition at line \fB97\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glAttachShader(program, shader)   __glAttachShader(program, shader)"

.PP
Definition at line \fB74\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glBindBuffer(target, buffer)   __glBindBuffer(target, buffer)"

.PP
Definition at line \fB57\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glBindVertexArray(arr)   __glBindVertexArray(arr)"

.PP
Definition at line \fB62\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glBufferData(target, size, data, usage)   __glBufferData(target, size, data, usage)"

.PP
Definition at line \fB58\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glCompileShader(shader)   __glCompileShader(shader)"

.PP
Definition at line \fB73\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glCreateBuffers(n, buffers)   __glCreateBuffers(n, buffers)"

.PP
Definition at line \fB55\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glCreateProgram()   __glCreateProgram()"

.PP
Definition at line \fB66\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glCreateShader(shaderType)   __glCreateShader(shaderType)"

.PP
Definition at line \fB67\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glCreateVertexArrays(n, arrays)   __glCreateVertexArrays(n, arrays)"

.PP
Definition at line \fB60\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glDeleteBuffers(n, buffers)   __glDeleteBuffers(n, buffers)"

.PP
Definition at line \fB56\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glDeleteProgram(program)   __glDeleteProgram(program)"

.PP
Definition at line \fB68\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glDeleteShader(shader)   __glDeleteShader(shader)"

.PP
Definition at line \fB76\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glDeleteVertexArrays(n, arrays)   __glDeleteVertexArrays(n, arrays)"

.PP
Definition at line \fB61\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glDetachShader(program, shader)   __glDetachShader(program, shader)"

.PP
Definition at line \fB75\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glEnableVertexAttribArray(index)   __glEnableVertexAttribArray(index)"

.PP
Definition at line \fB63\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glGetShaderInfoLog(shader, maxLength, length, infoLog)   __glGetShaderInfoLog(shader, maxLength, length, infoLog)"

.PP
Definition at line \fB78\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glGetShaderiv(shader, pname, params)   __glGetShaderiv(shader, pname, params)"

.PP
Definition at line \fB77\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glGetUniformLocation(program, name)   __glGetUniformLocation(program, name)"

.PP
Definition at line \fB79\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glLinkProgram(program)   __glLinkProgram(program)"

.PP
Definition at line \fB70\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glShaderSource(shader, count, string, length)   __glShaderSource(shader, count, string, length)"

.PP
Definition at line \fB72\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glUniform1f(location, v0)   __glUniform1f(location, v0)"

.PP
Definition at line \fB80\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glUniform2f(location, v0, v1)   __glUniform2f(location, v0, v1)"

.PP
Definition at line \fB81\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glUniform3f(location, v0, v1, v2)   __glUniform3f(location, v0, v1, v2)"

.PP
Definition at line \fB82\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glUniform4f(location, v0, v1, v2, v3)   __glUniform4f(location, v0, v1, v2, v3)"

.PP
Definition at line \fB83\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glUseProgram(program)   __glUseProgram(program)"

.PP
Definition at line \fB69\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glValidateProgram(program)   __glValidateProgram(program)"

.PP
Definition at line \fB71\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SS "#define glVertexAttribPointer(index, size, type, normalized, stride, pointer)   __glVertexAttribPointer(index, size, type, normalized, stride, pointer)"

.PP
Definition at line \fB64\fP of file \fBgl_function_placeholders\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for GLCore from the source code\&.
